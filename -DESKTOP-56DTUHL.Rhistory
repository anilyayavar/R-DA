string <- c("hello world", "hello there world", "hello")
grep("hello(?= world)", string, value = TRUE)
string <- c("hello world", "hello there world", "hello")
grep("hello(?=world)", string, value = TRUE)
string <- c("hello world", "hello there world", "hello")
grep("hello(?= world)", string, value = TRUE)
string <- c("hello world", "hello there world", "hello")
grep("hello(?=\\sworld)", string, value = TRUE)
string <- c("hello world", "hello there world", "hello")
grep("hello(?=\\sworld)", string, value = TRUE)
grep("hello", string, value = TRUE)
grep("hello(?=\\sworld)", string, value = TRUE)
grep("hello((?=\\sworld))", string, value = TRUE)
grep("hello(?=\\sworld)", string, value = TRUE)
stringss <- c("hello world", "hello there world", "hello")
grep("hello(?=\\sworld)", stringss, value = TRUE)
string <- c("hello world", "hello there world", "hello")
grep("hello(?=\\sworld)", string, value = TRUE)
?grep
grep("hello(?=\\sworld)", string, value = TRUE, perl = TRUE)
string <- c("hello world", "hello there world", "hello")
grep("hello(?=\\sworld)", string, value = TRUE, perl = TRUE)
# returns "hello world"
string <- c("hello world", "hello there world", "hello")
grep("hello(?= world)", string, value = TRUE, perl = TRUE)
# returns "hello world"
string <- c("hello world", "hello there world", "hello")
grep("hello(?= world)", string, value = TRUE, perl = TRUE)
# returns "hello world"
string <- c("hello world", "world hello", "hello there world")
grep("(?<=hello )world", string, value = TRUE, perl = TRUE)
# returns "hello world"
string <- c("hello there", "hello world", "hello world there")
grep("hello(?! world)", string, value = TRUE, perl = TRUE)
# returns "hello there"
string <- c("hello there", "hello world", "hello world there")
grep("hello(?! world)", string, value = TRUE, perl = TRUE)
string <- c("hello world", "world hello", "hello there world")
grep("(?<!hello )world", string, value = TRUE, perl = TRUE)
string <- c("apple", "banana", "cherry")
# Match any fruit name that starts with 'a' or 'c'
grep("^    # Start of the string
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
$    # End of the string", string, value = TRUE, perl = TRUE)
?regex
?regex()
# Match any fruit name that starts with 'a' or 'c'
grep(regex("^    # Start of the string
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
$    # End of the string", comments = TRUE), string, value = TRUE, perl = TRUE)
library(stringr)
phone <- regex("
\\(?     # optional opening parens
(\\d{3}) # area code
[) -]?   # optional closing parens, space, or dash
(\\d{3}) # another three numbers
[ -]?    # optional space or dash
(\\d{3}) # three more numbers
", comments = TRUE)
str_match("514-791-8141", phone)
# Match any fruit name that starts with 'a' or 'c'
grep(regex("
^    # Start of the string
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
$    # End of the string
", comments = TRUE), string, value = TRUE, perl = TRUE)
string <- c("apple", "banana", "cherry")
# Match any fruit name that starts with 'a' or 'c'
grep(regex("
^    # Start of the string
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
$    # End of the string
", comments = TRUE), string, value = TRUE, perl = TRUE)
# Match any fruit name that starts with 'a' or 'c'
grep(regex("
^   # Start of the string
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
$    # End of the string
", comments = TRUE), string, value = TRUE, perl = TRUE)
# Match any fruit name that starts with 'a' or 'c'
my_reg <- regex("
^   # Start of the string
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
$    # End of the string
", comments = TRUE)
grep(my_reg, string, value = TRUE, perl = TRUE)
# Match any fruit name that starts with 'a' or 'c'
my_reg <- regex(r"("
^   # Start of the string
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
$    # End of the string
")", comments = TRUE)
grep(my_reg, string, value = TRUE, perl = TRUE)
# Match any fruit name that starts with 'a' or 'c'
my_reg <- regex(r"(
^   # Start of the string
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
$    # End of the string
)", comments = TRUE)
grep(my_reg, string, value = TRUE, perl = TRUE)
# Match any fruit name that starts with 'a' or 'c'
my_reg <- regex(r"(
[ac] # Match 'a' or 'c'
\\w+ # Match one or more word characters
)", comments = TRUE)
grep(my_reg, string, value = TRUE, perl = TRUE)
phone <- regex(
r"(
\(?     # optional opening parens
(\d{3}) # area code
[)\-]?  # optional closing parens or dash
\ ?     # optional space
(\d{3}) # another three numbers
[\ -]?  # optional space or dash
(\d{4}) # four more numbers
)",
comments = TRUE
)
str_match("514-791-8141", phone)
my_pattern <- regex(
r"(
^     # starts with
[ac]  # starts with a or c
.*
)",
comments = TRUE
)
grep(my_pattern, string, value = TRUE, perl = TRUE)
string
my_pattern <- regex(
r"(
^     # starts with
[ac]  # starts with a or c
.*$
)",
comments = TRUE
)
grep(my_pattern, string, value = TRUE, perl = TRUE)
string <- "apple\nbanana\ncherry"
# Match any line that starts with 'a' or ends with 'y'
grep("(?mx)  # Enable verbose mode
^a     # Match lines that start with 'a'
|      # OR
y$     # Match lines that end with 'y'
", string, value = TRUE, perl = TRUE)
string <- c("apple","banana", "cherry")
# Match any line that starts with 'a' or ends with 'y'
grep("(?mx)  # Enable verbose mode
^a     # Match lines that start with 'a'
|      # OR
y$     # Match lines that end with 'y'
", string, value = TRUE, perl = TRUE)
strings <- c("apple\nbanana\ncherry", "dog\nfish\ncat")
# Match any line that starts with 'a' or ends with 'y'
grep("(?mx)  # Enable verbose mode
^a     # Match lines that start with 'a'
|      # OR
y$     # Match lines that end with 'y'
", strings, value = TRUE, perl = TRUE)
grep(phone, "514-791-814", perl = T, value = T)
?str_view
install.packages('regExplain')
install.packages('RegExplain')
source("https://install-github.me/gadenbuie/regexplain")
devtools::install_github("gadenbuie/regexplain")
install.packages('devtools')
install.packages("devtools")
devtools::install_github("gadenbuie/regexplain")
install.packages("cli")
devtools::install_github("gadenbuie/regexplain")
install.packages(c("alphavantager", "BH", "BiocManager", "bit", "blob", "bookdown", "broom", "bslib", "cachem", "car", "caret", "cli", "collapse", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "datamods", "dbplyr", "desc", "digest", "dplyr", "DT", "dtplyr", "e1071", "esquisse", "evaluate", "extrafont", "fansi", "fastmap", "flexdashboard", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fracdiff", "fs", "furrr", "future", "future.apply", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "ggtext", "globals", "googledrive", "googlesheets4", "gower", "gridtext", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "ipred", "isoband", "janeaustenr", "janitor", "jpeg", "jsonlite", "knitr", "lava", "learnr", "lifecycle", "listenv", "lme4", "lubridate", "magick", "maps", "maptools", "markdown", "MASS", "MatrixModels", "matrixStats", "minqa", "modelr", "nCov2019", "ndjson", "nlme", "openxlsx", "packrat", "padr", "PairViz", "palmerpenguins", "parallelly", "pbkrtest", "pdftools", "pillar", "pkgload", "plotly", "plyr", "png", "pracma", "processx", "progressr", "proj4", "pryr", "ps", "psych", "purrr", "qpdf", "r2symbols", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reactable", "readODS", "readr", "readxl", "recipes", "renv", "reprex", "RJSONIO", "rlang", "rmarkdown", "rsample", "rsconnect", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "shiny", "shinyWidgets", "slider", "sourcetools", "sp", "stringi", "stringr", "sys", "tibble", "tidyquant", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "timetk", "tinytex", "tokenizers", "tseries", "tsfeatures", "TSP", "urca", "utf8", "vctrs", "viridisLite", "visNetwork", "vroom", "WDI", "writexl", "xfun", "xts", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("alphavantager", "BH", "BiocManager", "bit", "blob", "bookdown", "broom", "bslib", "cachem", "car", "caret", "cli", "collapse", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "datamods", "dbplyr", "desc", "digest", "dplyr", "DT", "dtplyr", "e1071", "esquisse", "evaluate", "extrafont", "fansi", "fastmap", "flexdashboard", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fracdiff", "fs", "furrr", "future", "future.apply", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "ggtext", "globals", "googledrive", "googlesheets4", "gower", "gridtext", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "ipred", "isoband", "janeaustenr", "janitor", "jpeg", "jsonlite", "knitr", "lava", "learnr", "lifecycle", "listenv", "lme4", "lubridate", "magick", "maps", "maptools", "markdown", "MASS", "MatrixModels", "matrixStats", "minqa", "modelr", "nCov2019", "ndjson", "nlme", "openxlsx", "packrat", "padr", "PairViz", "palmerpenguins", "parallelly", "pbkrtest", "pdftools", "pillar", "pkgload", "plotly", "plyr", "png", "pracma", "processx", "progressr", "proj4", "pryr", "ps", "psych", "purrr", "qpdf", "r2symbols", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reactable", "readODS", "readr", "readxl", "recipes", "renv", "reprex", "RJSONIO", "rlang", "rmarkdown", "rsample", "rsconnect", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "shiny", "shinyWidgets", "slider", "sourcetools", "sp", "stringi", "stringr", "sys", "tibble", "tidyquant", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "timetk", "tinytex", "tokenizers", "tseries", "tsfeatures", "TSP", "urca", "utf8", "vctrs", "viridisLite", "visNetwork", "vroom", "WDI", "writexl", "xfun", "xts", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("alphavantager", "BH", "BiocManager", "bit", "blob", "bookdown", "broom", "bslib", "cachem", "car", "caret", "cli", "collapse", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "datamods", "dbplyr", "desc", "digest", "dplyr", "DT", "dtplyr", "e1071", "esquisse", "evaluate", "extrafont", "fansi", "fastmap", "flexdashboard", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fracdiff", "fs", "furrr", "future", "future.apply", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "ggtext", "globals", "googledrive", "googlesheets4", "gower", "gridtext", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "ipred", "isoband", "janeaustenr", "janitor", "jpeg", "jsonlite", "knitr", "lava", "learnr", "lifecycle", "listenv", "lme4", "lubridate", "magick", "maps", "maptools", "markdown", "MASS", "MatrixModels", "matrixStats", "minqa", "modelr", "nCov2019", "ndjson", "nlme", "openxlsx", "packrat", "padr", "PairViz", "palmerpenguins", "parallelly", "pbkrtest", "pdftools", "pillar", "pkgload", "plotly", "plyr", "png", "pracma", "processx", "progressr", "proj4", "pryr", "ps", "psych", "purrr", "qpdf", "r2symbols", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reactable", "readODS", "readr", "readxl", "recipes", "renv", "reprex", "RJSONIO", "rlang", "rmarkdown", "rsample", "rsconnect", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "shiny", "shinyWidgets", "slider", "sourcetools", "sp", "stringi", "stringr", "sys", "tibble", "tidyquant", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "timetk", "tinytex", "tokenizers", "tseries", "tsfeatures", "TSP", "urca", "utf8", "vctrs", "viridisLite", "visNetwork", "vroom", "WDI", "writexl", "xfun", "xts", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("alphavantager", "BH", "BiocManager", "bit", "blob", "bookdown", "broom", "bslib", "cachem", "car", "caret", "cli", "collapse", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "datamods", "dbplyr", "desc", "digest", "dplyr", "DT", "dtplyr", "e1071", "esquisse", "evaluate", "extrafont", "fansi", "fastmap", "flexdashboard", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fracdiff", "fs", "furrr", "future", "future.apply", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "ggtext", "globals", "googledrive", "googlesheets4", "gower", "gridtext", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "ipred", "isoband", "janeaustenr", "janitor", "jpeg", "jsonlite", "knitr", "lava", "learnr", "lifecycle", "listenv", "lme4", "lubridate", "magick", "maps", "maptools", "markdown", "MASS", "MatrixModels", "matrixStats", "minqa", "modelr", "nCov2019", "ndjson", "nlme", "openxlsx", "packrat", "padr", "PairViz", "palmerpenguins", "parallelly", "pbkrtest", "pdftools", "pillar", "pkgload", "plotly", "plyr", "png", "pracma", "processx", "progressr", "proj4", "pryr", "ps", "psych", "purrr", "qpdf", "r2symbols", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reactable", "readODS", "readr", "readxl", "recipes", "renv", "reprex", "RJSONIO", "rlang", "rmarkdown", "rsample", "rsconnect", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "shiny", "shinyWidgets", "slider", "sourcetools", "sp", "stringi", "stringr", "sys", "tibble", "tidyquant", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "timetk", "tinytex", "tokenizers", "tseries", "tsfeatures", "TSP", "urca", "utf8", "vctrs", "viridisLite", "visNetwork", "vroom", "WDI", "writexl", "xfun", "xts", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("alphavantager", "BH", "BiocManager", "bit", "blob", "bookdown", "broom", "bslib", "cachem", "car", "caret", "cli", "collapse", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "datamods", "dbplyr", "desc", "digest", "dplyr", "DT", "dtplyr", "e1071", "esquisse", "evaluate", "extrafont", "fansi", "fastmap", "flexdashboard", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fracdiff", "fs", "furrr", "future", "future.apply", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "ggtext", "globals", "googledrive", "googlesheets4", "gower", "gridtext", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "ipred", "isoband", "janeaustenr", "janitor", "jpeg", "jsonlite", "knitr", "lava", "learnr", "lifecycle", "listenv", "lme4", "lubridate", "magick", "maps", "maptools", "markdown", "MASS", "MatrixModels", "matrixStats", "minqa", "modelr", "nCov2019", "ndjson", "nlme", "openxlsx", "packrat", "padr", "PairViz", "palmerpenguins", "parallelly", "pbkrtest", "pdftools", "pillar", "pkgload", "plotly", "plyr", "png", "pracma", "processx", "progressr", "proj4", "pryr", "ps", "psych", "purrr", "qpdf", "r2symbols", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reactable", "readODS", "readr", "readxl", "recipes", "renv", "reprex", "RJSONIO", "rlang", "rmarkdown", "rsample", "rsconnect", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "shiny", "shinyWidgets", "slider", "sourcetools", "sp", "stringi", "stringr", "sys", "tibble", "tidyquant", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "timetk", "tinytex", "tokenizers", "tseries", "tsfeatures", "TSP", "urca", "utf8", "vctrs", "viridisLite", "visNetwork", "vroom", "WDI", "writexl", "xfun", "xts", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("alphavantager", "BH", "BiocManager", "bit", "blob", "bookdown", "broom", "bslib", "cachem", "car", "caret", "cli", "collapse", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "datamods", "dbplyr", "desc", "digest", "dplyr", "DT", "dtplyr", "e1071", "esquisse", "evaluate", "extrafont", "fansi", "fastmap", "flexdashboard", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fracdiff", "fs", "furrr", "future", "future.apply", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "ggtext", "globals", "googledrive", "googlesheets4", "gower", "gridtext", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "ipred", "isoband", "janeaustenr", "janitor", "jpeg", "jsonlite", "knitr", "lava", "learnr", "lifecycle", "listenv", "lme4", "lubridate", "magick", "maps", "maptools", "markdown", "MASS", "MatrixModels", "matrixStats", "minqa", "modelr", "nCov2019", "ndjson", "nlme", "openxlsx", "packrat", "padr", "PairViz", "palmerpenguins", "parallelly", "pbkrtest", "pdftools", "pillar", "pkgload", "plotly", "plyr", "png", "pracma", "processx", "progressr", "proj4", "pryr", "ps", "psych", "purrr", "qpdf", "r2symbols", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reactable", "readODS", "readr", "readxl", "recipes", "renv", "reprex", "RJSONIO", "rlang", "rmarkdown", "rsample", "rsconnect", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "shiny", "shinyWidgets", "slider", "sourcetools", "sp", "stringi", "stringr", "sys", "tibble", "tidyquant", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "timetk", "tinytex", "tokenizers", "tseries", "tsfeatures", "TSP", "urca", "utf8", "vctrs", "viridisLite", "visNetwork", "vroom", "WDI", "writexl", "xfun", "xts", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("alphavantager", "BH", "BiocManager", "bit", "blob", "bookdown", "broom", "bslib", "cachem", "car", "caret", "cli", "collapse", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "datamods", "dbplyr", "desc", "digest", "dplyr", "DT", "dtplyr", "e1071", "esquisse", "evaluate", "extrafont", "fansi", "fastmap", "flexdashboard", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fracdiff", "fs", "furrr", "future", "future.apply", "gapminder", "gargle", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "ggtext", "globals", "googledrive", "googlesheets4", "gower", "gridtext", "gtable", "gtools", "hardhat", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "ipred", "isoband", "janeaustenr", "janitor", "jpeg", "jsonlite", "knitr", "lava", "learnr", "lifecycle", "listenv", "lme4", "lubridate", "magick", "maps", "maptools", "markdown", "MASS", "MatrixModels", "matrixStats", "minqa", "modelr", "nCov2019", "ndjson", "nlme", "openxlsx", "packrat", "padr", "PairViz", "palmerpenguins", "parallelly", "pbkrtest", "pdftools", "pillar", "pkgload", "plotly", "plyr", "png", "pracma", "processx", "progressr", "proj4", "pryr", "ps", "psych", "purrr", "qpdf", "r2symbols", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reactable", "readODS", "readr", "readxl", "recipes", "renv", "reprex", "RJSONIO", "rlang", "rmarkdown", "rsample", "rsconnect", "rstatix", "rstudioapi", "Rttf2pt1", "rvest", "sass", "scales", "shiny", "shinyWidgets", "slider", "sourcetools", "sp", "stringi", "stringr", "sys", "tibble", "tidyquant", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "timetk", "tinytex", "tokenizers", "tseries", "tsfeatures", "TSP", "urca", "utf8", "vctrs", "viridisLite", "visNetwork", "vroom", "WDI", "writexl", "xfun", "xts", "yaml", "yulab.utils", "zip", "zoo"))
source("https://install-github.me/gadenbuie/regexplain")
devtools::install_github("gadenbuie/regexplain")
install.packages(c("cli", "digest", "fastmap", "htmltools", "rlang", "xfun", "yaml"))
install.packages("rlang")
install.packages("rlang")
install.packages(c("cli", "digest", "fastmap", "htmltools", "rlang", "xfun", "yaml"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "rlang", "xfun", "yaml"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "rlang"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "rlang"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "rlang"))
# Match any line that starts with 'a' or ends with 'y'
grep("(?mx)  # Enable verbose mode
^[ac]     # Match lines that start with 'a'
\\w+      # OR
$     # Match lines that end with 'y'
", strings, value = TRUE, perl = TRUE)
strings <- c("apple\nbanana\ncherry", "dog\nfish\ncat")
# Match any line that starts with 'a' or ends with 'y'
grep("(?mx)  # Enable verbose mode
^[ac]     # Match lines that start with 'a'
\\w+      # OR
$     # Match lines that end with 'y'
", strings, value = TRUE, perl = TRUE)
strings <- c("apple", "banana", 'cherry')
# Match any line that starts with 'a' or ends with 'y'
grep("(?mx)  # Enable verbose mode
^[ac]     # Match lines that start with 'a'
\\w+      # OR
$     # Match lines that end with 'y'
", strings, value = TRUE, perl = TRUE)
grep(regex(r("
^
[ac]
\\w+
$
"), comments = TRUE), strings, value = TRUE, perl = TRUE)
grep(regex(r"(
^
[ac]
\\w+
$
)", comments = TRUE), strings, value = TRUE, perl = TRUE)
grep(regex(r"(
^
[ac]
\\w+
$
)",
comments = TRUE),
strings,
value = TRUE,
perl = TRUE)
grep(regex(
r"(
^
[ac]
\\w+
$
)",
comments = TRUE),
strings,
value = TRUE,
perl = TRUE)
fruits <- regex(
r"(
\(?     # optional opening parens
(\d{3}) # area code
[)\-]?  # optional closing parens or dash
\ ?     # optional space
(\d{3}) # another three numbers
[\ -]?  # optional space or dash
(\d{4}) # four more numbers
)",
comments = TRUE
)
library(stringr)
library(janitor)
mtcars %>%
get_dupes(wt, cyl)
janitor::excel_numeric_to_date(41590)
unsorted_dates <- c('2018-05-31', '2018-31-12', '41590', '1-1-2023')
janitor::convert_to_date(unsorted_dates)
unsorted_dates <- c('2018-05-31', '41590', '01-01-2023')
janitor::convert_to_date(unsorted_dates)
unsorted_dates <- c('2018-05-31', '41590', 41590)
janitor::convert_to_date(unsorted_dates)
mixed_dates <- c("13-11-1991", "13-Sep-22", "20 August 2000", "15 August 47",
"03/31/23", "12-31-2022")
lubridate::parse_date_time(mixed_dates,
orders = c("d m y", "d B Y", "m/d/y"),
locale = "eng")
mixed_dates <- c("13-11-1991", "13-Sep-22", "20 August 2000", "15 August 47",
"03/31/23", "12-31-2022")
lubridate::parse_date_time(mixed_dates,
orders = c("d m y", "d B Y", "m/d/y", "d B y"),
locale = "eng")
mixed_dates <- c("13-11-1991", "13-Sep-22", "20 August 2000", "15 August 87",
"03/31/23", "12-31-2022")
lubridate::parse_date_time(mixed_dates,
orders = c("d m y", "d B Y", "m/d/y", "d B y"),
locale = "eng")
?convert_to_date
lubridate::ymd_hms('2018-1-1 12:23:32')
?strptime
knitr::include_graphics('shapes.png')
library(tidyverse)
df <- data.frame(
x = c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,
0.5,0.5,0.5,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,
0.25,0.25,0.25,0.25),
y = c(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L,
11L,12L,1L,2L,3L,4L,5L,6L,7L,8L,9L,10L,11L,12L),
z = c(0L,1L,2L,3L,4L,5L,6L,7L,8L,9L,10L,
11L,12L,13L,14L,15L,16L,17L,18L,19L,20L,21L,22L,
23L)
)
df %>%
ggplot(aes(x=y, y=x, label=z))+
geom_point(aes(shape=z), size=7)+
scale_shape_identity() +
labs(x="", y="") +
geom_text(nudge_y = 0.08) +
ylim(c(0.2,0.6)) +
theme_void()
ggsave('shapes.png', width = 12, height = 2)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ class, ncol = 2)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(year ~ class)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
geom_text(aes(label = rownames(mtcars)),
size = 3,
color = "red",
vjust = -1)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
subtitle = "Data from mtcars dataset",
x = "Horsepower",
y = "Miles per gallon",
caption = "Source: R datasets")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per gallon") +
theme(plot.title = element_text(size = 20, family = "Arial"),
axis.title = element_text(size = 16, family = "Helvetica"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per gallon") +
theme(plot.title = element_text(size = 20, family = "cambria"),
axis.title = element_text(size = 16, family = "calibri"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per gallon") +
theme(plot.title = element_text(size = 20, family = "Cambria"),
axis.title = element_text(size = 16, family = "Calibri"))
install.packages('extrafont')
library(extrafont)
font_import()
loadfonts(device = "win")
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per gallon") +
theme(plot.title = element_text(size = 20, family = "Cambria"),
axis.title = element_text(size = 16, family = "Calibri"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per gallon") +
theme(plot.title = element_text(size = 20, family = "Comic Sans MS"),
axis.title = element_text(size = 16, family = "Calibri"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per gallon") +
theme(plot.title = element_text(size = 20, family = "Comic Sans MS"),
axis.title = element_text(size = 16, family = "Cambria"))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(title = "MPG vs. Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon") +
theme_bw()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(title = "MPG vs. Weight",
x = "Weight (1000 lbs)",
y = "Miles per Gallon") +
theme_bw() +
theme(plot.title = element_text(color = "blue", size = 20, face = "bold"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per gallon") +
theme(plot.title = element_text(size = 20, color = 'seagreen'),
axis.title = element_text(size = 16, color = "gray10"))
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per gallon") +
theme(plot.title = element_text(size = 20, color = 'seagreen'),
axis.title = element_text(size = 16, color = "blue"))
library(ggplot2)
library(patchwork)
library(ggrepel)
library(cowplot)
# Create sample data
set.seed(123)
df <- data.frame(x = rnorm(100), y = rnorm(100), label = LETTERS[1:100])
# Create base plot with points and labels
base_plot <- ggplot(df, aes(x, y)) +
geom_point(size = 2) +
ggrepel::geom_text_repel(aes(label = label), size = 3, box.padding = 0.5)
# Create two additional plots with custom annotations
annotation1 <- cowplot::ggdraw() +
cowplot::draw_label("Annotation 1", fontface = "bold")
annotation2 <- cowplot::ggdraw() +
cowplot::draw_label("Annotation 2", fontface = "bold")
# Combine plots using patchwork
combined_plot <- base_plot +
plot_spacer() + annotation1 +
plot_spacer() + base_plot +
plot_spacer() + annotation2 +
plot_layout(ncol = 2)
combined_plot
# Create sample data
set.seed(123)
df <- data.frame(group = rep(c("A", "B"), each = 100), value = c(rnorm(100, 0, 1), rnorm(100, 1, 1)))
# Create base plot with violin plots and data labels
base_plot <- ggplot(df, aes(x = group, y = value, fill = group)) +
geom_violin(trim = FALSE, alpha = 0.7) +
geom_boxplot(width = 0.1, alpha = 0.8) +
ggrepel::geom_text_repel(aes(label = round(value, 2)), size = 3, box.padding = 0.5, nudge_y = 0.2) +
labs(x = "Group", y = "Value") +
scale_fill_manual(values = c("#CC6666", "#9999CC"))
# Create custom annotations using cowplot
annotation1 <- cowplot::ggdraw() +
cowplot::draw_label("Group A", fontface = "bold", x = 0.5, y = 0.9)
annotation2 <- cowplot::ggdraw() +
cowplot::draw_label("Group B", fontface = "bold", x = 1.5, y = 0.9)
# Combine plots using patchwork
combined_plot <- base_plot +
plot_spacer() + annotation1 +
plot_spacer() + base_plot +
plot_spacer() + annotation2 +
plot_layout(ncol = 2)
combined_plot
